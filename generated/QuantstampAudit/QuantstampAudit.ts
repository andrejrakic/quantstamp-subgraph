// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class LogAuditFinished extends ethereum.Event {
  get params(): LogAuditFinished__Params {
    return new LogAuditFinished__Params(this);
  }
}

export class LogAuditFinished__Params {
  _event: LogAuditFinished;

  constructor(event: LogAuditFinished) {
    this._event = event;
  }

  get requestId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get auditor(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get auditResult(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get report(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class LogPoliceAuditFinished extends ethereum.Event {
  get params(): LogPoliceAuditFinished__Params {
    return new LogPoliceAuditFinished__Params(this);
  }
}

export class LogPoliceAuditFinished__Params {
  _event: LogPoliceAuditFinished;

  constructor(event: LogPoliceAuditFinished) {
    this._event = event;
  }

  get requestId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get policeNode(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get report(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get isVerified(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class LogAuditRequested extends ethereum.Event {
  get params(): LogAuditRequested__Params {
    return new LogAuditRequested__Params(this);
  }
}

export class LogAuditRequested__Params {
  _event: LogAuditRequested;

  constructor(event: LogAuditRequested) {
    this._event = event;
  }

  get requestId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get requestor(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get uri(): string {
    return this._event.parameters[2].value.toString();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LogAuditAssigned extends ethereum.Event {
  get params(): LogAuditAssigned__Params {
    return new LogAuditAssigned__Params(this);
  }
}

export class LogAuditAssigned__Params {
  _event: LogAuditAssigned;

  constructor(event: LogAuditAssigned) {
    this._event = event;
  }

  get requestId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get auditor(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get requestor(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get uri(): string {
    return this._event.parameters[3].value.toString();
  }

  get price(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get requestBlockNumber(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class LogReportSubmissionError_InvalidAuditor extends ethereum.Event {
  get params(): LogReportSubmissionError_InvalidAuditor__Params {
    return new LogReportSubmissionError_InvalidAuditor__Params(this);
  }
}

export class LogReportSubmissionError_InvalidAuditor__Params {
  _event: LogReportSubmissionError_InvalidAuditor;

  constructor(event: LogReportSubmissionError_InvalidAuditor) {
    this._event = event;
  }

  get requestId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get auditor(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class LogReportSubmissionError_InvalidState extends ethereum.Event {
  get params(): LogReportSubmissionError_InvalidState__Params {
    return new LogReportSubmissionError_InvalidState__Params(this);
  }
}

export class LogReportSubmissionError_InvalidState__Params {
  _event: LogReportSubmissionError_InvalidState;

  constructor(event: LogReportSubmissionError_InvalidState) {
    this._event = event;
  }

  get requestId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get auditor(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get state(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class LogReportSubmissionError_InvalidResult extends ethereum.Event {
  get params(): LogReportSubmissionError_InvalidResult__Params {
    return new LogReportSubmissionError_InvalidResult__Params(this);
  }
}

export class LogReportSubmissionError_InvalidResult__Params {
  _event: LogReportSubmissionError_InvalidResult;

  constructor(event: LogReportSubmissionError_InvalidResult) {
    this._event = event;
  }

  get requestId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get auditor(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get state(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class LogReportSubmissionError_ExpiredAudit extends ethereum.Event {
  get params(): LogReportSubmissionError_ExpiredAudit__Params {
    return new LogReportSubmissionError_ExpiredAudit__Params(this);
  }
}

export class LogReportSubmissionError_ExpiredAudit__Params {
  _event: LogReportSubmissionError_ExpiredAudit;

  constructor(event: LogReportSubmissionError_ExpiredAudit) {
    this._event = event;
  }

  get requestId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get auditor(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get allowanceBlockNumber(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogAuditAssignmentError_ExceededMaxAssignedRequests extends ethereum.Event {
  get params(): LogAuditAssignmentError_ExceededMaxAssignedRequests__Params {
    return new LogAuditAssignmentError_ExceededMaxAssignedRequests__Params(
      this
    );
  }
}

export class LogAuditAssignmentError_ExceededMaxAssignedRequests__Params {
  _event: LogAuditAssignmentError_ExceededMaxAssignedRequests;

  constructor(event: LogAuditAssignmentError_ExceededMaxAssignedRequests) {
    this._event = event;
  }

  get auditor(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LogAuditAssignmentError_Understaked extends ethereum.Event {
  get params(): LogAuditAssignmentError_Understaked__Params {
    return new LogAuditAssignmentError_Understaked__Params(this);
  }
}

export class LogAuditAssignmentError_Understaked__Params {
  _event: LogAuditAssignmentError_Understaked;

  constructor(event: LogAuditAssignmentError_Understaked) {
    this._event = event;
  }

  get auditor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get stake(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LogAuditAssignmentUpdate_Expired extends ethereum.Event {
  get params(): LogAuditAssignmentUpdate_Expired__Params {
    return new LogAuditAssignmentUpdate_Expired__Params(this);
  }
}

export class LogAuditAssignmentUpdate_Expired__Params {
  _event: LogAuditAssignmentUpdate_Expired;

  constructor(event: LogAuditAssignmentUpdate_Expired) {
    this._event = event;
  }

  get requestId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get allowanceBlockNumber(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LogClaimRewardsReachedGasLimit extends ethereum.Event {
  get params(): LogClaimRewardsReachedGasLimit__Params {
    return new LogClaimRewardsReachedGasLimit__Params(this);
  }
}

export class LogClaimRewardsReachedGasLimit__Params {
  _event: LogClaimRewardsReachedGasLimit;

  constructor(event: LogClaimRewardsReachedGasLimit) {
    this._event = event;
  }

  get auditor(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LogAuditQueueIsEmpty extends ethereum.Event {
  get params(): LogAuditQueueIsEmpty__Params {
    return new LogAuditQueueIsEmpty__Params(this);
  }
}

export class LogAuditQueueIsEmpty__Params {
  _event: LogAuditQueueIsEmpty;

  constructor(event: LogAuditQueueIsEmpty) {
    this._event = event;
  }
}

export class LogPayAuditor extends ethereum.Event {
  get params(): LogPayAuditor__Params {
    return new LogPayAuditor__Params(this);
  }
}

export class LogPayAuditor__Params {
  _event: LogPayAuditor;

  constructor(event: LogPayAuditor) {
    this._event = event;
  }

  get requestId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get auditor(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogAuditNodePriceChanged extends ethereum.Event {
  get params(): LogAuditNodePriceChanged__Params {
    return new LogAuditNodePriceChanged__Params(this);
  }
}

export class LogAuditNodePriceChanged__Params {
  _event: LogAuditNodePriceChanged;

  constructor(event: LogAuditNodePriceChanged) {
    this._event = event;
  }

  get auditor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LogRefund extends ethereum.Event {
  get params(): LogRefund__Params {
    return new LogRefund__Params(this);
  }
}

export class LogRefund__Params {
  _event: LogRefund;

  constructor(event: LogRefund) {
    this._event = event;
  }

  get requestId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get requestor(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogRefundInvalidRequestor extends ethereum.Event {
  get params(): LogRefundInvalidRequestor__Params {
    return new LogRefundInvalidRequestor__Params(this);
  }
}

export class LogRefundInvalidRequestor__Params {
  _event: LogRefundInvalidRequestor;

  constructor(event: LogRefundInvalidRequestor) {
    this._event = event;
  }

  get requestId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get requestor(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class LogRefundInvalidState extends ethereum.Event {
  get params(): LogRefundInvalidState__Params {
    return new LogRefundInvalidState__Params(this);
  }
}

export class LogRefundInvalidState__Params {
  _event: LogRefundInvalidState;

  constructor(event: LogRefundInvalidState) {
    this._event = event;
  }

  get requestId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get state(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class LogRefundInvalidFundsLocked extends ethereum.Event {
  get params(): LogRefundInvalidFundsLocked__Params {
    return new LogRefundInvalidFundsLocked__Params(this);
  }
}

export class LogRefundInvalidFundsLocked__Params {
  _event: LogRefundInvalidFundsLocked;

  constructor(event: LogRefundInvalidFundsLocked) {
    this._event = event;
  }

  get requestId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get currentBlock(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get fundLockEndBlock(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogAuditNodePriceHigherThanRequests extends ethereum.Event {
  get params(): LogAuditNodePriceHigherThanRequests__Params {
    return new LogAuditNodePriceHigherThanRequests__Params(this);
  }
}

export class LogAuditNodePriceHigherThanRequests__Params {
  _event: LogAuditNodePriceHigherThanRequests;

  constructor(event: LogAuditNodePriceHigherThanRequests) {
    this._event = event;
  }

  get auditor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Pause extends ethereum.Event {
  get params(): Pause__Params {
    return new Pause__Params(this);
  }
}

export class Pause__Params {
  _event: Pause;

  constructor(event: Pause) {
    this._event = event;
  }
}

export class Unpause extends ethereum.Event {
  get params(): Unpause__Params {
    return new Unpause__Params(this);
  }
}

export class Unpause__Params {
  _event: Unpause;

  constructor(event: Unpause) {
    this._event = event;
  }
}

export class OwnershipRenounced extends ethereum.Event {
  get params(): OwnershipRenounced__Params {
    return new OwnershipRenounced__Params(this);
  }
}

export class OwnershipRenounced__Params {
  _event: OwnershipRenounced;

  constructor(event: OwnershipRenounced) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class QuantstampAudit__myMostRecentAssignedAuditResult {
  value0: BigInt;
  value1: Address;
  value2: string;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: string,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class QuantstampAudit__getNextAvailableRewardResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class QuantstampAudit__getNextPoliceAssignmentResult {
  value0: boolean;
  value1: BigInt;
  value2: BigInt;
  value3: string;
  value4: BigInt;

  constructor(
    value0: boolean,
    value1: BigInt,
    value2: BigInt,
    value3: string,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class QuantstampAudit extends ethereum.SmartContract {
  static bind(address: Address): QuantstampAudit {
    return new QuantstampAudit("QuantstampAudit", address);
  }

  reportData(): Address {
    let result = super.call("reportData", "reportData():(address)", []);

    return result[0].toAddress();
  }

  try_reportData(): ethereum.CallResult<Address> {
    let result = super.tryCall("reportData", "reportData():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isAuditFinished(requestId: BigInt): boolean {
    let result = super.call(
      "isAuditFinished",
      "isAuditFinished(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(requestId)]
    );

    return result[0].toBoolean();
  }

  try_isAuditFinished(requestId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAuditFinished",
      "isAuditFinished(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(requestId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  requestAudit(contractUri: string, price: BigInt): BigInt {
    let result = super.call(
      "requestAudit",
      "requestAudit(string,uint256):(uint256)",
      [
        ethereum.Value.fromString(contractUri),
        ethereum.Value.fromUnsignedBigInt(price)
      ]
    );

    return result[0].toBigInt();
  }

  try_requestAudit(
    contractUri: string,
    price: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "requestAudit",
      "requestAudit(string,uint256):(uint256)",
      [
        ethereum.Value.fromString(contractUri),
        ethereum.Value.fromUnsignedBigInt(price)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  refund(requestId: BigInt): boolean {
    let result = super.call("refund", "refund(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(requestId)
    ]);

    return result[0].toBoolean();
  }

  try_refund(requestId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("refund", "refund(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(requestId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getNextAuditByPrice(price: BigInt, requestId: BigInt): BigInt {
    let result = super.call(
      "getNextAuditByPrice",
      "getNextAuditByPrice(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromUnsignedBigInt(requestId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getNextAuditByPrice(
    price: BigInt,
    requestId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNextAuditByPrice",
      "getNextAuditByPrice(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromUnsignedBigInt(requestId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unstake(): boolean {
    let result = super.call("unstake", "unstake():(bool)", []);

    return result[0].toBoolean();
  }

  try_unstake(): ethereum.CallResult<boolean> {
    let result = super.tryCall("unstake", "unstake():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  myMostRecentAssignedAudit(): QuantstampAudit__myMostRecentAssignedAuditResult {
    let result = super.call(
      "myMostRecentAssignedAudit",
      "myMostRecentAssignedAudit():(uint256,address,string,uint256,uint256)",
      []
    );

    return new QuantstampAudit__myMostRecentAssignedAuditResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_myMostRecentAssignedAudit(): ethereum.CallResult<
    QuantstampAudit__myMostRecentAssignedAuditResult
  > {
    let result = super.tryCall(
      "myMostRecentAssignedAudit",
      "myMostRecentAssignedAudit():(uint256,address,string,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new QuantstampAudit__myMostRecentAssignedAuditResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  mostRecentAssignedRequestIdsPerAuditor(param0: Address): BigInt {
    let result = super.call(
      "mostRecentAssignedRequestIdsPerAuditor",
      "mostRecentAssignedRequestIdsPerAuditor(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_mostRecentAssignedRequestIdsPerAuditor(
    param0: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mostRecentAssignedRequestIdsPerAuditor",
      "mostRecentAssignedRequestIdsPerAuditor(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  submitPoliceReport(
    requestId: BigInt,
    report: Bytes,
    isVerified: boolean
  ): boolean {
    let result = super.call(
      "submitPoliceReport",
      "submitPoliceReport(uint256,bytes,bool):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(requestId),
        ethereum.Value.fromBytes(report),
        ethereum.Value.fromBoolean(isVerified)
      ]
    );

    return result[0].toBoolean();
  }

  try_submitPoliceReport(
    requestId: BigInt,
    report: Bytes,
    isVerified: boolean
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "submitPoliceReport",
      "submitPoliceReport(uint256,bytes,bool):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(requestId),
        ethereum.Value.fromBytes(report),
        ethereum.Value.fromBoolean(isVerified)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  claimRewards(): boolean {
    let result = super.call("claimRewards", "claimRewards():(bool)", []);

    return result[0].toBoolean();
  }

  try_claimRewards(): ethereum.CallResult<boolean> {
    let result = super.tryCall("claimRewards", "claimRewards():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  requestAuditWithPriceHint(
    contractUri: string,
    price: BigInt,
    existingPrice: BigInt
  ): BigInt {
    let result = super.call(
      "requestAuditWithPriceHint",
      "requestAuditWithPriceHint(string,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromString(contractUri),
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromUnsignedBigInt(existingPrice)
      ]
    );

    return result[0].toBigInt();
  }

  try_requestAuditWithPriceHint(
    contractUri: string,
    price: BigInt,
    existingPrice: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "requestAuditWithPriceHint",
      "requestAuditWithPriceHint(string,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromString(contractUri),
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromUnsignedBigInt(existingPrice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalStakedFor(addr: Address): BigInt {
    let result = super.call(
      "totalStakedFor",
      "totalStakedFor(address):(uint256)",
      [ethereum.Value.fromAddress(addr)]
    );

    return result[0].toBigInt();
  }

  try_totalStakedFor(addr: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalStakedFor",
      "totalStakedFor(address):(uint256)",
      [ethereum.Value.fromAddress(addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReport(requestId: BigInt): Bytes {
    let result = super.call("getReport", "getReport(uint256):(bytes)", [
      ethereum.Value.fromUnsignedBigInt(requestId)
    ]);

    return result[0].toBytes();
  }

  try_getReport(requestId: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall("getReport", "getReport(uint256):(bytes)", [
      ethereum.Value.fromUnsignedBigInt(requestId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getNextAvailableReward(
    requestId: BigInt
  ): QuantstampAudit__getNextAvailableRewardResult {
    let result = super.call(
      "getNextAvailableReward",
      "getNextAvailableReward(uint256):(bool,uint256)",
      [ethereum.Value.fromUnsignedBigInt(requestId)]
    );

    return new QuantstampAudit__getNextAvailableRewardResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_getNextAvailableReward(
    requestId: BigInt
  ): ethereum.CallResult<QuantstampAudit__getNextAvailableRewardResult> {
    let result = super.tryCall(
      "getNextAvailableReward",
      "getNextAvailableReward(uint256):(bool,uint256)",
      [ethereum.Value.fromUnsignedBigInt(requestId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new QuantstampAudit__getNextAvailableRewardResult(
        value[0].toBoolean(),
        value[1].toBigInt()
      )
    );
  }

  getNextAssignedRequest(requestId: BigInt): BigInt {
    let result = super.call(
      "getNextAssignedRequest",
      "getNextAssignedRequest(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(requestId)]
    );

    return result[0].toBigInt();
  }

  try_getNextAssignedRequest(requestId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNextAssignedRequest",
      "getNextAssignedRequest(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(requestId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMinAuditPriceLowerCap(): BigInt {
    let result = super.call(
      "getMinAuditPriceLowerCap",
      "getMinAuditPriceLowerCap():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getMinAuditPriceLowerCap(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMinAuditPriceLowerCap",
      "getMinAuditPriceLowerCap():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  auditData(): Address {
    let result = super.call("auditData", "auditData():(address)", []);

    return result[0].toAddress();
  }

  try_auditData(): ethereum.CallResult<Address> {
    let result = super.tryCall("auditData", "auditData():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  anyRequestAvailable(): i32 {
    let result = super.call(
      "anyRequestAvailable",
      "anyRequestAvailable():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_anyRequestAvailable(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "anyRequestAvailable",
      "anyRequestAvailable():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  hasEnoughStake(addr: Address): boolean {
    let result = super.call(
      "hasEnoughStake",
      "hasEnoughStake(address):(bool)",
      [ethereum.Value.fromAddress(addr)]
    );

    return result[0].toBoolean();
  }

  try_hasEnoughStake(addr: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasEnoughStake",
      "hasEnoughStake(address):(bool)",
      [ethereum.Value.fromAddress(addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getMaxAssignedRequests(): BigInt {
    let result = super.call(
      "getMaxAssignedRequests",
      "getMaxAssignedRequests():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getMaxAssignedRequests(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMaxAssignedRequests",
      "getMaxAssignedRequests():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAuditTimeoutInBlocks(): BigInt {
    let result = super.call(
      "getAuditTimeoutInBlocks",
      "getAuditTimeoutInBlocks():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getAuditTimeoutInBlocks(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAuditTimeoutInBlocks",
      "getAuditTimeoutInBlocks():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getNextPrice(price: BigInt): BigInt {
    let result = super.call("getNextPrice", "getNextPrice(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(price)
    ]);

    return result[0].toBigInt();
  }

  try_getNextPrice(price: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNextPrice",
      "getNextPrice(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(price)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMinAuditStake(): BigInt {
    let result = super.call(
      "getMinAuditStake",
      "getMinAuditStake():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getMinAuditStake(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMinAuditStake",
      "getMinAuditStake():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasAvailableRewards(): boolean {
    let result = super.call(
      "hasAvailableRewards",
      "hasAvailableRewards():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_hasAvailableRewards(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasAvailableRewards",
      "hasAvailableRewards():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  stake(amount: BigInt): boolean {
    let result = super.call("stake", "stake(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_stake(amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("stake", "stake(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tokenEscrow(): Address {
    let result = super.call("tokenEscrow", "tokenEscrow():(address)", []);

    return result[0].toAddress();
  }

  try_tokenEscrow(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenEscrow", "tokenEscrow():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  claimReward(requestId: BigInt): boolean {
    let result = super.call("claimReward", "claimReward(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(requestId)
    ]);

    return result[0].toBoolean();
  }

  try_claimReward(requestId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("claimReward", "claimReward(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(requestId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  police(): Address {
    let result = super.call("police", "police():(address)", []);

    return result[0].toAddress();
  }

  try_police(): ethereum.CallResult<Address> {
    let result = super.tryCall("police", "police():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  assignedRequestCount(param0: Address): BigInt {
    let result = super.call(
      "assignedRequestCount",
      "assignedRequestCount(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_assignedRequestCount(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "assignedRequestCount",
      "assignedRequestCount(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  findPrecedingPrice(price: BigInt): BigInt {
    let result = super.call(
      "findPrecedingPrice",
      "findPrecedingPrice(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(price)]
    );

    return result[0].toBigInt();
  }

  try_findPrecedingPrice(price: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "findPrecedingPrice",
      "findPrecedingPrice(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(price)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isPoliceNode(node: Address): boolean {
    let result = super.call("isPoliceNode", "isPoliceNode(address):(bool)", [
      ethereum.Value.fromAddress(node)
    ]);

    return result[0].toBoolean();
  }

  try_isPoliceNode(node: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPoliceNode", "isPoliceNode(address):(bool)", [
      ethereum.Value.fromAddress(node)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getNextPoliceAssignment(): QuantstampAudit__getNextPoliceAssignmentResult {
    let result = super.call(
      "getNextPoliceAssignment",
      "getNextPoliceAssignment():(bool,uint256,uint256,string,uint256)",
      []
    );

    return new QuantstampAudit__getNextPoliceAssignmentResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toString(),
      result[4].toBigInt()
    );
  }

  try_getNextPoliceAssignment(): ethereum.CallResult<
    QuantstampAudit__getNextPoliceAssignmentResult
  > {
    let result = super.tryCall(
      "getNextPoliceAssignment",
      "getNextPoliceAssignment():(bool,uint256,uint256,string,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new QuantstampAudit__getNextPoliceAssignmentResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toString(),
        value[4].toBigInt()
      )
    );
  }

  getMinAuditPrice(auditor: Address): BigInt {
    let result = super.call(
      "getMinAuditPrice",
      "getMinAuditPrice(address):(uint256)",
      [ethereum.Value.fromAddress(auditor)]
    );

    return result[0].toBigInt();
  }

  try_getMinAuditPrice(auditor: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMinAuditPrice",
      "getMinAuditPrice(address):(uint256)",
      [ethereum.Value.fromAddress(auditor)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class SetMinAuditPriceLowerCapCall extends ethereum.Call {
  get inputs(): SetMinAuditPriceLowerCapCall__Inputs {
    return new SetMinAuditPriceLowerCapCall__Inputs(this);
  }

  get outputs(): SetMinAuditPriceLowerCapCall__Outputs {
    return new SetMinAuditPriceLowerCapCall__Outputs(this);
  }
}

export class SetMinAuditPriceLowerCapCall__Inputs {
  _call: SetMinAuditPriceLowerCapCall;

  constructor(call: SetMinAuditPriceLowerCapCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinAuditPriceLowerCapCall__Outputs {
  _call: SetMinAuditPriceLowerCapCall;

  constructor(call: SetMinAuditPriceLowerCapCall) {
    this._call = call;
  }
}

export class SetAuditNodePriceCall extends ethereum.Call {
  get inputs(): SetAuditNodePriceCall__Inputs {
    return new SetAuditNodePriceCall__Inputs(this);
  }

  get outputs(): SetAuditNodePriceCall__Outputs {
    return new SetAuditNodePriceCall__Outputs(this);
  }
}

export class SetAuditNodePriceCall__Inputs {
  _call: SetAuditNodePriceCall;

  constructor(call: SetAuditNodePriceCall) {
    this._call = call;
  }

  get price(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetAuditNodePriceCall__Outputs {
  _call: SetAuditNodePriceCall;

  constructor(call: SetAuditNodePriceCall) {
    this._call = call;
  }
}

export class RequestAuditCall extends ethereum.Call {
  get inputs(): RequestAuditCall__Inputs {
    return new RequestAuditCall__Inputs(this);
  }

  get outputs(): RequestAuditCall__Outputs {
    return new RequestAuditCall__Outputs(this);
  }
}

export class RequestAuditCall__Inputs {
  _call: RequestAuditCall;

  constructor(call: RequestAuditCall) {
    this._call = call;
  }

  get contractUri(): string {
    return this._call.inputValues[0].value.toString();
  }

  get price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RequestAuditCall__Outputs {
  _call: RequestAuditCall;

  constructor(call: RequestAuditCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RefundCall extends ethereum.Call {
  get inputs(): RefundCall__Inputs {
    return new RefundCall__Inputs(this);
  }

  get outputs(): RefundCall__Outputs {
    return new RefundCall__Outputs(this);
  }
}

export class RefundCall__Inputs {
  _call: RefundCall;

  constructor(call: RefundCall) {
    this._call = call;
  }

  get requestId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RefundCall__Outputs {
  _call: RefundCall;

  constructor(call: RefundCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UnstakeCall extends ethereum.Call {
  get inputs(): UnstakeCall__Inputs {
    return new UnstakeCall__Inputs(this);
  }

  get outputs(): UnstakeCall__Outputs {
    return new UnstakeCall__Outputs(this);
  }
}

export class UnstakeCall__Inputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }
}

export class UnstakeCall__Outputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SubmitPoliceReportCall extends ethereum.Call {
  get inputs(): SubmitPoliceReportCall__Inputs {
    return new SubmitPoliceReportCall__Inputs(this);
  }

  get outputs(): SubmitPoliceReportCall__Outputs {
    return new SubmitPoliceReportCall__Outputs(this);
  }
}

export class SubmitPoliceReportCall__Inputs {
  _call: SubmitPoliceReportCall;

  constructor(call: SubmitPoliceReportCall) {
    this._call = call;
  }

  get requestId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get report(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get isVerified(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SubmitPoliceReportCall__Outputs {
  _call: SubmitPoliceReportCall;

  constructor(call: SubmitPoliceReportCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ClaimRewardsCall extends ethereum.Call {
  get inputs(): ClaimRewardsCall__Inputs {
    return new ClaimRewardsCall__Inputs(this);
  }

  get outputs(): ClaimRewardsCall__Outputs {
    return new ClaimRewardsCall__Outputs(this);
  }
}

export class ClaimRewardsCall__Inputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }
}

export class ClaimRewardsCall__Outputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class RequestAuditWithPriceHintCall extends ethereum.Call {
  get inputs(): RequestAuditWithPriceHintCall__Inputs {
    return new RequestAuditWithPriceHintCall__Inputs(this);
  }

  get outputs(): RequestAuditWithPriceHintCall__Outputs {
    return new RequestAuditWithPriceHintCall__Outputs(this);
  }
}

export class RequestAuditWithPriceHintCall__Inputs {
  _call: RequestAuditWithPriceHintCall;

  constructor(call: RequestAuditWithPriceHintCall) {
    this._call = call;
  }

  get contractUri(): string {
    return this._call.inputValues[0].value.toString();
  }

  get price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get existingPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RequestAuditWithPriceHintCall__Outputs {
  _call: RequestAuditWithPriceHintCall;

  constructor(call: RequestAuditWithPriceHintCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ClaimRewardCall extends ethereum.Call {
  get inputs(): ClaimRewardCall__Inputs {
    return new ClaimRewardCall__Inputs(this);
  }

  get outputs(): ClaimRewardCall__Outputs {
    return new ClaimRewardCall__Outputs(this);
  }
}

export class ClaimRewardCall__Inputs {
  _call: ClaimRewardCall;

  constructor(call: ClaimRewardCall) {
    this._call = call;
  }

  get requestId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimRewardCall__Outputs {
  _call: ClaimRewardCall;

  constructor(call: ClaimRewardCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class GetNextAuditRequestCall extends ethereum.Call {
  get inputs(): GetNextAuditRequestCall__Inputs {
    return new GetNextAuditRequestCall__Inputs(this);
  }

  get outputs(): GetNextAuditRequestCall__Outputs {
    return new GetNextAuditRequestCall__Outputs(this);
  }
}

export class GetNextAuditRequestCall__Inputs {
  _call: GetNextAuditRequestCall;

  constructor(call: GetNextAuditRequestCall) {
    this._call = call;
  }
}

export class GetNextAuditRequestCall__Outputs {
  _call: GetNextAuditRequestCall;

  constructor(call: GetNextAuditRequestCall) {
    this._call = call;
  }
}

export class SubmitReportCall extends ethereum.Call {
  get inputs(): SubmitReportCall__Inputs {
    return new SubmitReportCall__Inputs(this);
  }

  get outputs(): SubmitReportCall__Outputs {
    return new SubmitReportCall__Outputs(this);
  }
}

export class SubmitReportCall__Inputs {
  _call: SubmitReportCall;

  constructor(call: SubmitReportCall) {
    this._call = call;
  }

  get requestId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get auditResult(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get report(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SubmitReportCall__Outputs {
  _call: SubmitReportCall;

  constructor(call: SubmitReportCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get auditDataAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get reportDataAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get escrowAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get policeAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
