// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Audit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Audit entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Audit entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Audit", id.toString(), this);
  }

  static load(id: string): Audit | null {
    return store.get("Audit", id) as Audit | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get auditState(): i32 {
    let value = this.get("auditState");
    return value.toI32();
  }

  set auditState(value: i32) {
    this.set("auditState", Value.fromI32(value));
  }

  get requestor(): Bytes | null {
    let value = this.get("requestor");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set requestor(value: Bytes | null) {
    if (value === null) {
      this.unset("requestor");
    } else {
      this.set("requestor", Value.fromBytes(value as Bytes));
    }
  }

  get price(): BigInt | null {
    let value = this.get("price");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt | null) {
    if (value === null) {
      this.unset("price");
    } else {
      this.set("price", Value.fromBigInt(value as BigInt));
    }
  }

  get contract(): string | null {
    let value = this.get("contract");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set contract(value: string | null) {
    if (value === null) {
      this.unset("contract");
    } else {
      this.set("contract", Value.fromString(value as string));
    }
  }

  get isVerified(): boolean {
    let value = this.get("isVerified");
    return value.toBoolean();
  }

  set isVerified(value: boolean) {
    this.set("isVerified", Value.fromBoolean(value));
  }

  get auditor(): string | null {
    let value = this.get("auditor");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set auditor(value: string | null) {
    if (value === null) {
      this.unset("auditor");
    } else {
      this.set("auditor", Value.fromString(value as string));
    }
  }

  get policeAuditor(): string | null {
    let value = this.get("policeAuditor");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set policeAuditor(value: string | null) {
    if (value === null) {
      this.unset("policeAuditor");
    } else {
      this.set("policeAuditor", Value.fromString(value as string));
    }
  }

  get report(): string | null {
    let value = this.get("report");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set report(value: string | null) {
    if (value === null) {
      this.unset("report");
    } else {
      this.set("report", Value.fromString(value as string));
    }
  }

  get policeReport(): Bytes | null {
    let value = this.get("policeReport");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set policeReport(value: Bytes | null) {
    if (value === null) {
      this.unset("policeReport");
    } else {
      this.set("policeReport", Value.fromBytes(value as Bytes));
    }
  }

  get requestTimestamp(): BigInt | null {
    let value = this.get("requestTimestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set requestTimestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("requestTimestamp");
    } else {
      this.set("requestTimestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get assignTimestamp(): BigInt | null {
    let value = this.get("assignTimestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set assignTimestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("assignTimestamp");
    } else {
      this.set("assignTimestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get reportTimestamp(): BigInt | null {
    let value = this.get("reportTimestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set reportTimestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("reportTimestamp");
    } else {
      this.set("reportTimestamp", Value.fromBigInt(value as BigInt));
    }
  }
}

export class Report extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Report entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Report entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Report", id.toString(), this);
  }

  static load(id: string): Report | null {
    return store.get("Report", id) as Report | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get auditor(): string | null {
    let value = this.get("auditor");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set auditor(value: string | null) {
    if (value === null) {
      this.unset("auditor");
    } else {
      this.set("auditor", Value.fromString(value as string));
    }
  }

  get reportText(): Bytes | null {
    let value = this.get("reportText");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set reportText(value: Bytes | null) {
    if (value === null) {
      this.unset("reportText");
    } else {
      this.set("reportText", Value.fromBytes(value as Bytes));
    }
  }

  get contract(): string | null {
    let value = this.get("contract");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set contract(value: string | null) {
    if (value === null) {
      this.unset("contract");
    } else {
      this.set("contract", Value.fromString(value as string));
    }
  }
}

export class Vulnerability extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Vulnerability entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Vulnerability entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Vulnerability", id.toString(), this);
  }

  static load(id: string): Vulnerability | null {
    return store.get("Vulnerability", id) as Vulnerability | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class SmartContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SmartContract entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SmartContract entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SmartContract", id.toString(), this);
  }

  static load(id: string): SmartContract | null {
    return store.get("SmartContract", id) as SmartContract | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vulnerabilites(): Array<string> | null {
    let value = this.get("vulnerabilites");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set vulnerabilites(value: Array<string> | null) {
    if (value === null) {
      this.unset("vulnerabilites");
    } else {
      this.set("vulnerabilites", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class AuditNode extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AuditNode entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AuditNode entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AuditNode", id.toString(), this);
  }

  static load(id: string): AuditNode | null {
    return store.get("AuditNode", id) as AuditNode | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get price(): BigInt | null {
    let value = this.get("price");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt | null) {
    if (value === null) {
      this.unset("price");
    } else {
      this.set("price", Value.fromBigInt(value as BigInt));
    }
  }

  get feeCollected(): BigInt | null {
    let value = this.get("feeCollected");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set feeCollected(value: BigInt | null) {
    if (value === null) {
      this.unset("feeCollected");
    } else {
      this.set("feeCollected", Value.fromBigInt(value as BigInt));
    }
  }
}

export class PoliceNode extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PoliceNode entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PoliceNode entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PoliceNode", id.toString(), this);
  }

  static load(id: string): PoliceNode | null {
    return store.get("PoliceNode", id) as PoliceNode | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get feeCollected(): BigInt | null {
    let value = this.get("feeCollected");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set feeCollected(value: BigInt | null) {
    if (value === null) {
      this.unset("feeCollected");
    } else {
      this.set("feeCollected", Value.fromBigInt(value as BigInt));
    }
  }
}

export class Refund extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Refund entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Refund entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Refund", id.toString(), this);
  }

  static load(id: string): Refund | null {
    return store.get("Refund", id) as Refund | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get requestor(): Bytes | null {
    let value = this.get("requestor");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set requestor(value: Bytes | null) {
    if (value === null) {
      this.unset("requestor");
    } else {
      this.set("requestor", Value.fromBytes(value as Bytes));
    }
  }

  get price(): BigInt | null {
    let value = this.get("price");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt | null) {
    if (value === null) {
      this.unset("price");
    } else {
      this.set("price", Value.fromBigInt(value as BigInt));
    }
  }
}

export class LogReportSubmissionError_InvalidAuditorEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save LogReportSubmissionError_InvalidAuditorEntity entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LogReportSubmissionError_InvalidAuditorEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set(
      "LogReportSubmissionError_InvalidAuditorEntity",
      id.toString(),
      this
    );
  }

  static load(
    id: string
  ): LogReportSubmissionError_InvalidAuditorEntity | null {
    return store.get(
      "LogReportSubmissionError_InvalidAuditorEntity",
      id
    ) as LogReportSubmissionError_InvalidAuditorEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get block(): Bytes | null {
    let value = this.get("block");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set block(value: Bytes | null) {
    if (value === null) {
      this.unset("block");
    } else {
      this.set("block", Value.fromBytes(value as Bytes));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get invalidAuditor(): Bytes | null {
    let value = this.get("invalidAuditor");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set invalidAuditor(value: Bytes | null) {
    if (value === null) {
      this.unset("invalidAuditor");
    } else {
      this.set("invalidAuditor", Value.fromBytes(value as Bytes));
    }
  }

  get requestId(): BigInt | null {
    let value = this.get("requestId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set requestId(value: BigInt | null) {
    if (value === null) {
      this.unset("requestId");
    } else {
      this.set("requestId", Value.fromBigInt(value as BigInt));
    }
  }
}

export class LogReportSubmissionError_InvalidStateEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save LogReportSubmissionError_InvalidStateEntity entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LogReportSubmissionError_InvalidStateEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set(
      "LogReportSubmissionError_InvalidStateEntity",
      id.toString(),
      this
    );
  }

  static load(id: string): LogReportSubmissionError_InvalidStateEntity | null {
    return store.get(
      "LogReportSubmissionError_InvalidStateEntity",
      id
    ) as LogReportSubmissionError_InvalidStateEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get block(): Bytes | null {
    let value = this.get("block");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set block(value: Bytes | null) {
    if (value === null) {
      this.unset("block");
    } else {
      this.set("block", Value.fromBytes(value as Bytes));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get auditor(): Bytes | null {
    let value = this.get("auditor");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set auditor(value: Bytes | null) {
    if (value === null) {
      this.unset("auditor");
    } else {
      this.set("auditor", Value.fromBytes(value as Bytes));
    }
  }

  get requestId(): BigInt | null {
    let value = this.get("requestId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set requestId(value: BigInt | null) {
    if (value === null) {
      this.unset("requestId");
    } else {
      this.set("requestId", Value.fromBigInt(value as BigInt));
    }
  }

  get invalidState(): i32 {
    let value = this.get("invalidState");
    return value.toI32();
  }

  set invalidState(value: i32) {
    this.set("invalidState", Value.fromI32(value));
  }
}

export class LogReportSubmissionError_InvalidResultEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save LogReportSubmissionError_InvalidResultEntity entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LogReportSubmissionError_InvalidResultEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set(
      "LogReportSubmissionError_InvalidResultEntity",
      id.toString(),
      this
    );
  }

  static load(id: string): LogReportSubmissionError_InvalidResultEntity | null {
    return store.get(
      "LogReportSubmissionError_InvalidResultEntity",
      id
    ) as LogReportSubmissionError_InvalidResultEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get block(): Bytes | null {
    let value = this.get("block");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set block(value: Bytes | null) {
    if (value === null) {
      this.unset("block");
    } else {
      this.set("block", Value.fromBytes(value as Bytes));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get auditor(): Bytes | null {
    let value = this.get("auditor");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set auditor(value: Bytes | null) {
    if (value === null) {
      this.unset("auditor");
    } else {
      this.set("auditor", Value.fromBytes(value as Bytes));
    }
  }

  get requestId(): BigInt | null {
    let value = this.get("requestId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set requestId(value: BigInt | null) {
    if (value === null) {
      this.unset("requestId");
    } else {
      this.set("requestId", Value.fromBigInt(value as BigInt));
    }
  }

  get invalidState(): i32 {
    let value = this.get("invalidState");
    return value.toI32();
  }

  set invalidState(value: i32) {
    this.set("invalidState", Value.fromI32(value));
  }
}

export class LogReportSubmissionError_ExpiredAuditEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save LogReportSubmissionError_ExpiredAuditEntity entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LogReportSubmissionError_ExpiredAuditEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set(
      "LogReportSubmissionError_ExpiredAuditEntity",
      id.toString(),
      this
    );
  }

  static load(id: string): LogReportSubmissionError_ExpiredAuditEntity | null {
    return store.get(
      "LogReportSubmissionError_ExpiredAuditEntity",
      id
    ) as LogReportSubmissionError_ExpiredAuditEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get block(): Bytes | null {
    let value = this.get("block");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set block(value: Bytes | null) {
    if (value === null) {
      this.unset("block");
    } else {
      this.set("block", Value.fromBytes(value as Bytes));
    }
  }

  get blockNumber(): BigInt | null {
    let value = this.get("blockNumber");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt | null) {
    if (value === null) {
      this.unset("blockNumber");
    } else {
      this.set("blockNumber", Value.fromBigInt(value as BigInt));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get auditor(): Bytes | null {
    let value = this.get("auditor");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set auditor(value: Bytes | null) {
    if (value === null) {
      this.unset("auditor");
    } else {
      this.set("auditor", Value.fromBytes(value as Bytes));
    }
  }

  get requestId(): BigInt | null {
    let value = this.get("requestId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set requestId(value: BigInt | null) {
    if (value === null) {
      this.unset("requestId");
    } else {
      this.set("requestId", Value.fromBigInt(value as BigInt));
    }
  }

  get allowanceBlockNumber(): BigInt | null {
    let value = this.get("allowanceBlockNumber");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set allowanceBlockNumber(value: BigInt | null) {
    if (value === null) {
      this.unset("allowanceBlockNumber");
    } else {
      this.set("allowanceBlockNumber", Value.fromBigInt(value as BigInt));
    }
  }
}

export class LogAuditAssignmentError_UnderstakedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save LogAuditAssignmentError_UnderstakedEntity entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LogAuditAssignmentError_UnderstakedEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LogAuditAssignmentError_UnderstakedEntity", id.toString(), this);
  }

  static load(id: string): LogAuditAssignmentError_UnderstakedEntity | null {
    return store.get(
      "LogAuditAssignmentError_UnderstakedEntity",
      id
    ) as LogAuditAssignmentError_UnderstakedEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get block(): Bytes | null {
    let value = this.get("block");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set block(value: Bytes | null) {
    if (value === null) {
      this.unset("block");
    } else {
      this.set("block", Value.fromBytes(value as Bytes));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get auditor(): Bytes | null {
    let value = this.get("auditor");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set auditor(value: Bytes | null) {
    if (value === null) {
      this.unset("auditor");
    } else {
      this.set("auditor", Value.fromBytes(value as Bytes));
    }
  }

  get invalidStake(): BigInt | null {
    let value = this.get("invalidStake");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set invalidStake(value: BigInt | null) {
    if (value === null) {
      this.unset("invalidStake");
    } else {
      this.set("invalidStake", Value.fromBigInt(value as BigInt));
    }
  }
}

export class LogAuditAssignmentUpdate_ExpiredEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save LogAuditAssignmentUpdate_ExpiredEntity entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LogAuditAssignmentUpdate_ExpiredEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LogAuditAssignmentUpdate_ExpiredEntity", id.toString(), this);
  }

  static load(id: string): LogAuditAssignmentUpdate_ExpiredEntity | null {
    return store.get(
      "LogAuditAssignmentUpdate_ExpiredEntity",
      id
    ) as LogAuditAssignmentUpdate_ExpiredEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get block(): Bytes | null {
    let value = this.get("block");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set block(value: Bytes | null) {
    if (value === null) {
      this.unset("block");
    } else {
      this.set("block", Value.fromBytes(value as Bytes));
    }
  }

  get blockNumber(): BigInt | null {
    let value = this.get("blockNumber");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt | null) {
    if (value === null) {
      this.unset("blockNumber");
    } else {
      this.set("blockNumber", Value.fromBigInt(value as BigInt));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get requestId(): BigInt | null {
    let value = this.get("requestId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set requestId(value: BigInt | null) {
    if (value === null) {
      this.unset("requestId");
    } else {
      this.set("requestId", Value.fromBigInt(value as BigInt));
    }
  }

  get allowanceBlockNumber(): BigInt | null {
    let value = this.get("allowanceBlockNumber");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set allowanceBlockNumber(value: BigInt | null) {
    if (value === null) {
      this.unset("allowanceBlockNumber");
    } else {
      this.set("allowanceBlockNumber", Value.fromBigInt(value as BigInt));
    }
  }
}

export class LogRefund_InvalidRequestor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save LogRefund_InvalidRequestor entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LogRefund_InvalidRequestor entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LogRefund_InvalidRequestor", id.toString(), this);
  }

  static load(id: string): LogRefund_InvalidRequestor | null {
    return store.get(
      "LogRefund_InvalidRequestor",
      id
    ) as LogRefund_InvalidRequestor | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get block(): Bytes | null {
    let value = this.get("block");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set block(value: Bytes | null) {
    if (value === null) {
      this.unset("block");
    } else {
      this.set("block", Value.fromBytes(value as Bytes));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get requestId(): BigInt | null {
    let value = this.get("requestId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set requestId(value: BigInt | null) {
    if (value === null) {
      this.unset("requestId");
    } else {
      this.set("requestId", Value.fromBigInt(value as BigInt));
    }
  }

  get invalidRequestor(): Bytes | null {
    let value = this.get("invalidRequestor");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set invalidRequestor(value: Bytes | null) {
    if (value === null) {
      this.unset("invalidRequestor");
    } else {
      this.set("invalidRequestor", Value.fromBytes(value as Bytes));
    }
  }
}

export class LogRefund_InvalidState extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save LogRefund_InvalidState entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LogRefund_InvalidState entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LogRefund_InvalidState", id.toString(), this);
  }

  static load(id: string): LogRefund_InvalidState | null {
    return store.get(
      "LogRefund_InvalidState",
      id
    ) as LogRefund_InvalidState | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get block(): Bytes | null {
    let value = this.get("block");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set block(value: Bytes | null) {
    if (value === null) {
      this.unset("block");
    } else {
      this.set("block", Value.fromBytes(value as Bytes));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get requestId(): BigInt | null {
    let value = this.get("requestId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set requestId(value: BigInt | null) {
    if (value === null) {
      this.unset("requestId");
    } else {
      this.set("requestId", Value.fromBigInt(value as BigInt));
    }
  }

  get invalidState(): i32 {
    let value = this.get("invalidState");
    return value.toI32();
  }

  set invalidState(value: i32) {
    this.set("invalidState", Value.fromI32(value));
  }
}

export class LogRefund_InvalidFundsLocked extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save LogRefund_InvalidFundsLocked entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LogRefund_InvalidFundsLocked entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LogRefund_InvalidFundsLocked", id.toString(), this);
  }

  static load(id: string): LogRefund_InvalidFundsLocked | null {
    return store.get(
      "LogRefund_InvalidFundsLocked",
      id
    ) as LogRefund_InvalidFundsLocked | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get block(): Bytes | null {
    let value = this.get("block");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set block(value: Bytes | null) {
    if (value === null) {
      this.unset("block");
    } else {
      this.set("block", Value.fromBytes(value as Bytes));
    }
  }

  get blockNumber(): BigInt | null {
    let value = this.get("blockNumber");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt | null) {
    if (value === null) {
      this.unset("blockNumber");
    } else {
      this.set("blockNumber", Value.fromBigInt(value as BigInt));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get requestId(): BigInt | null {
    let value = this.get("requestId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set requestId(value: BigInt | null) {
    if (value === null) {
      this.unset("requestId");
    } else {
      this.set("requestId", Value.fromBigInt(value as BigInt));
    }
  }

  get currentBlock(): BigInt | null {
    let value = this.get("currentBlock");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set currentBlock(value: BigInt | null) {
    if (value === null) {
      this.unset("currentBlock");
    } else {
      this.set("currentBlock", Value.fromBigInt(value as BigInt));
    }
  }

  get fundLockEndBlock(): BigInt | null {
    let value = this.get("fundLockEndBlock");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fundLockEndBlock(value: BigInt | null) {
    if (value === null) {
      this.unset("fundLockEndBlock");
    } else {
      this.set("fundLockEndBlock", Value.fromBigInt(value as BigInt));
    }
  }
}
